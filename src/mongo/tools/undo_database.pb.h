// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: undo_database.proto

#ifndef PROTOBUF_undo_5fdatabase_2eproto__INCLUDED
#define PROTOBUF_undo_5fdatabase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace UndoProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_undo_5fdatabase_2eproto();
void protobuf_AssignDesc_undo_5fdatabase_2eproto();
void protobuf_ShutdownFile_undo_5fdatabase_2eproto();

class DataAccessList;
class DataAccessUnit;

// ===================================================================

class DataAccessList : public ::google::protobuf::Message {
 public:
  DataAccessList();
  virtual ~DataAccessList();

  DataAccessList(const DataAccessList& from);

  inline DataAccessList& operator=(const DataAccessList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataAccessList& default_instance();

  void Swap(DataAccessList* other);

  // implements Message ----------------------------------------------

  DataAccessList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataAccessList& from);
  void MergeFrom(const DataAccessList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UndoProto.DataAccessUnit msgs = 1;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 1;
  inline const ::UndoProto::DataAccessUnit& msgs(int index) const;
  inline ::UndoProto::DataAccessUnit* mutable_msgs(int index);
  inline ::UndoProto::DataAccessUnit* add_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::UndoProto::DataAccessUnit >&
      msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::UndoProto::DataAccessUnit >*
      mutable_msgs();

  // @@protoc_insertion_point(class_scope:UndoProto.DataAccessList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::UndoProto::DataAccessUnit > msgs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_undo_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_undo_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_undo_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static DataAccessList* default_instance_;
};
// -------------------------------------------------------------------

class DataAccessUnit : public ::google::protobuf::Message {
 public:
  DataAccessUnit();
  virtual ~DataAccessUnit();

  DataAccessUnit(const DataAccessUnit& from);

  inline DataAccessUnit& operator=(const DataAccessUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataAccessUnit& default_instance();

  void Swap(DataAccessUnit* other);

  // implements Message ----------------------------------------------

  DataAccessUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataAccessUnit& from);
  void MergeFrom(const DataAccessUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // repeated string readIds = 3;
  inline int readids_size() const;
  inline void clear_readids();
  static const int kReadIdsFieldNumber = 3;
  inline const ::std::string& readids(int index) const;
  inline ::std::string* mutable_readids(int index);
  inline void set_readids(int index, const ::std::string& value);
  inline void set_readids(int index, const char* value);
  inline void set_readids(int index, const char* value, size_t size);
  inline ::std::string* add_readids();
  inline void add_readids(const ::std::string& value);
  inline void add_readids(const char* value);
  inline void add_readids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& readids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_readids();

  // repeated string writeIds = 4;
  inline int writeids_size() const;
  inline void clear_writeids();
  static const int kWriteIdsFieldNumber = 4;
  inline const ::std::string& writeids(int index) const;
  inline ::std::string* mutable_writeids(int index);
  inline void set_writeids(int index, const ::std::string& value);
  inline void set_writeids(int index, const char* value);
  inline void set_writeids(int index, const char* value, size_t size);
  inline ::std::string* add_writeids();
  inline void add_writeids(const ::std::string& value);
  inline void add_writeids(const char* value);
  inline void add_writeids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& writeids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_writeids();

  // @@protoc_insertion_point(class_scope:UndoProto.DataAccessUnit)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* source_;
  ::google::protobuf::RepeatedPtrField< ::std::string> readids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> writeids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_undo_5fdatabase_2eproto();
  friend void protobuf_AssignDesc_undo_5fdatabase_2eproto();
  friend void protobuf_ShutdownFile_undo_5fdatabase_2eproto();

  void InitAsDefaultInstance();
  static DataAccessUnit* default_instance_;
};
// ===================================================================


// ===================================================================

// DataAccessList

// repeated .UndoProto.DataAccessUnit msgs = 1;
inline int DataAccessList::msgs_size() const {
  return msgs_.size();
}
inline void DataAccessList::clear_msgs() {
  msgs_.Clear();
}
inline const ::UndoProto::DataAccessUnit& DataAccessList::msgs(int index) const {
  return msgs_.Get(index);
}
inline ::UndoProto::DataAccessUnit* DataAccessList::mutable_msgs(int index) {
  return msgs_.Mutable(index);
}
inline ::UndoProto::DataAccessUnit* DataAccessList::add_msgs() {
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UndoProto::DataAccessUnit >&
DataAccessList::msgs() const {
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::UndoProto::DataAccessUnit >*
DataAccessList::mutable_msgs() {
  return &msgs_;
}

// -------------------------------------------------------------------

// DataAccessUnit

// required string id = 1;
inline bool DataAccessUnit::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataAccessUnit::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataAccessUnit::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataAccessUnit::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& DataAccessUnit::id() const {
  return *id_;
}
inline void DataAccessUnit::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void DataAccessUnit::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void DataAccessUnit::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataAccessUnit::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* DataAccessUnit::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataAccessUnit::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string source = 2;
inline bool DataAccessUnit::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataAccessUnit::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataAccessUnit::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataAccessUnit::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DataAccessUnit::source() const {
  return *source_;
}
inline void DataAccessUnit::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void DataAccessUnit::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void DataAccessUnit::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataAccessUnit::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* DataAccessUnit::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataAccessUnit::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string readIds = 3;
inline int DataAccessUnit::readids_size() const {
  return readids_.size();
}
inline void DataAccessUnit::clear_readids() {
  readids_.Clear();
}
inline const ::std::string& DataAccessUnit::readids(int index) const {
  return readids_.Get(index);
}
inline ::std::string* DataAccessUnit::mutable_readids(int index) {
  return readids_.Mutable(index);
}
inline void DataAccessUnit::set_readids(int index, const ::std::string& value) {
  readids_.Mutable(index)->assign(value);
}
inline void DataAccessUnit::set_readids(int index, const char* value) {
  readids_.Mutable(index)->assign(value);
}
inline void DataAccessUnit::set_readids(int index, const char* value, size_t size) {
  readids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataAccessUnit::add_readids() {
  return readids_.Add();
}
inline void DataAccessUnit::add_readids(const ::std::string& value) {
  readids_.Add()->assign(value);
}
inline void DataAccessUnit::add_readids(const char* value) {
  readids_.Add()->assign(value);
}
inline void DataAccessUnit::add_readids(const char* value, size_t size) {
  readids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataAccessUnit::readids() const {
  return readids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataAccessUnit::mutable_readids() {
  return &readids_;
}

// repeated string writeIds = 4;
inline int DataAccessUnit::writeids_size() const {
  return writeids_.size();
}
inline void DataAccessUnit::clear_writeids() {
  writeids_.Clear();
}
inline const ::std::string& DataAccessUnit::writeids(int index) const {
  return writeids_.Get(index);
}
inline ::std::string* DataAccessUnit::mutable_writeids(int index) {
  return writeids_.Mutable(index);
}
inline void DataAccessUnit::set_writeids(int index, const ::std::string& value) {
  writeids_.Mutable(index)->assign(value);
}
inline void DataAccessUnit::set_writeids(int index, const char* value) {
  writeids_.Mutable(index)->assign(value);
}
inline void DataAccessUnit::set_writeids(int index, const char* value, size_t size) {
  writeids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataAccessUnit::add_writeids() {
  return writeids_.Add();
}
inline void DataAccessUnit::add_writeids(const ::std::string& value) {
  writeids_.Add()->assign(value);
}
inline void DataAccessUnit::add_writeids(const char* value) {
  writeids_.Add()->assign(value);
}
inline void DataAccessUnit::add_writeids(const char* value, size_t size) {
  writeids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataAccessUnit::writeids() const {
  return writeids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataAccessUnit::mutable_writeids() {
  return &writeids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UndoProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_undo_5fdatabase_2eproto__INCLUDED
